[project]
name = "bluesky-nats"
version = "0.1.1"
description = "NATS JetStream connectivity for Bluesky"
authors = [
    {name = "Niko Kivel", email = "niko.kivel@lightsource.ca"},
]
requires-python = ">=3.10"
dependencies = [
    "bluesky>=1.12.0",
    "nats-py>=2.9.0",
    "ormsgpack>=1.5.0",
]

[project.optional-dependencies]
examples = [
    "matplotlib>=3.9.2",
    "ophyd>=1.9.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest-mock>=3.14.0",
    "pytest>=8.3.3",
    "hypothesis>=6.112.1",
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.0",
    "pytest>=8.3.3",
    "pyyaml>=6.0.2",
    "ruff>=0.6.8",
    "toml>=0.10.2",
    "coverage>=7.6.1",
]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
# On top of the defaults (`E4`, E7`, `E9`, and `F`), enable flake8-bugbear (`B`) and flake8-quotes (`Q`).
#select = ["E4", "E7", "E9", "F", "B", "Q", "N806"]
#select = ["E", "F", "W", "A", "PLC", "PLE", "PLW", "I"]
select = ["ALL"]

ignore = [
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN101", # allow `self` to be w.o type
    "ANN102", # allow `cls` to be w/o type
    "ANN401", # allow `Any`
    "ANN204", # add return type None to __init__
    "D100",
    "D101",
    "D102",
    "D107", # allow `__init__` w/o docstring
    "D203", # empty line above class docstring
    "D212", # multi line summary first line
    "D401", # imparative docstring
    "ERA001", # allow commented code
    "F541",
    "FIX", # Line contains TODO, consider resolving the issue
    "G004", # logging statement uses f-string
    "PTH118", # `os.path.join()` should be replaced by `Path` with `/` operator
    "PLR0913", # Too many arguments in function definition (6 > 5)
    "T201", # allow print
    "FA", # allow missing  "Missing `from __future__ import annotations`, but uses XXX"
    # "W503",  # Flake8 considers line-breaks before operators to be best practice, contrary to PEP 8
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ANN", # allow missing type annotation
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    # "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    # "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]
